# ===============================
# = DATA SOURCE
# ===============================
# Set here configurations for the database connection
spring.datasource.url=jdbc:mysql://localhost:3306/users2?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC

spring.datasource.username=root
spring.datasource.password=
spring.datasource.driver-class-name=com.mysql.jdbc.Driver

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle=true
spring.datasource.validationQuery=SELECT 1
# ===============================
# = JPA / HIBERNATE
# ===============================
# Show or not log for each sql query
spring.jpa.show-sql=true
# Hibernate ddl auto (create, create-drop, update): with "create-drop" the database
# schema will be automatically created afresh for every start of application

spring.jpa.hibernate.ddl-auto=update
#create-drop - update:manejo de hibernate con la bbdd: 
#UPDATE: SI NO EXISTE LA CREA O LA MODIFICA SI HUBO CAMBIOS EN LA TABLA
#CREATE-DROP: BORRA LA TABLA Y LA CREA
#VALIDATE:ARROJA EXEPTION SI LA TABLA NO COINCIDE CON NUESTRA ENTIDAD.
#NONE: CUANDO ESTAS EN PRODUCCION YA QUE LA TABLA YA EXISTE Y TIENE SUS VALORES.

# Naming strategy
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyHbmImpl
spring.jpa.hibernate.naming.physical-strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect


logging.level.org.springframework.web=OFF
logging.level.com.aew=ALL
logging.file=/Users/Adrian/application.log
logging.pattern.file= "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
